import time
import arcpy

from setup_project import NRAS_URL, LAYER_FOLDER, aprx
from apply_crop_symbology import apply_crop_symbology
from apply_soil_symbology import apply_soil_symbology

# Script start time
T0_SCRIPT = time.perf_counter()

# url to roadmap map server
ROADMAP_URL = NRAS_URL + 'WaSHI_Roadmap_2023/MapServer/'

# Create dictionary with focus groups and
# indices to be concatenated with the roadmap url
group_dict = {
    'Western_Diversified': list(range(36, 40)),
    'Tree_Fruit': list(range(31, 35)),
    'Northwest_Annual': list(range(26, 30)),
    'Grape': list(range(21, 25)),
    'Dryland': list(range(16, 20)),
    'CBIP': list(range(11, 15)),
    'CBI': list(range(6, 10)),
    'Caneberry': list(range(1, 5))
}

# Update dictionary to include urls instead of just the index
for key, value in group_dict.items():
    url_list = []
    for index in value:
        URL = ROADMAP_URL + str(index)
        url_list.sort(reverse = True)
        url_list.append(URL)
        group_dict.update({key: url_list})

# Create new maps for each focus group and add layers from map server
for key, value in group_dict.items():
    aprx.createMap(key)
    mapx = aprx.listMaps(key)[0]
    for url in value:
        mapx.addDataFromPath(url)
    print(f'Created {key} map.')

# Apply symbologies
for mapx in aprx.listMaps():
    apply_crop_symbology()
    apply_soil_symbology()
print('Applied crop and soil symbologies.')

# Turn off soils layers by default
for mapx in aprx.listMaps():
    if mapx.name not in ['WaSHI_Roadmap', 'LTAREs']:
        lyrs_to_remove = ['*Texture*', '*AWS*', '*SOC*']
        for lyr in lyrs_to_remove:
            l = mapx.listLayers(lyr)[0]
            l.visible = False
print('Turned soil layers off by default.')

# Move crop layer above texture layer
for mapx in aprx.listMaps():
    if mapx.name not in ['WaSHI_Roadmap', 'LTAREs']:
        crop = mapx.listLayers('*Crops*')[0]
        texture = mapx.listLayers('*Texture*')[0]
        mapx.moveLayer(reference_layer = texture,
                       move_layer = crop,
                       insert_position = 'BEFORE')
print('Moved crop layer above soils layers.')

# Remove focus group name from layer names
for mapx in aprx.listMaps():
    if mapx.name not in ['WaSHI_Roadmap', 'LTAREs']:
        for lyr in mapx.listLayers('*Crops'):
            lyr.name = 'Crops'
        for lyr in mapx.listLayers('*AWS*'):
            lyr.name = 'AWS'
        for lyr in mapx.listLayers('*SOC*'):
            lyr.name = 'SOC'
        for lyr in mapx.listLayers('*Texture*'):
            lyr.name = 'Texture'
print('Removed focus group name from layer names.')

# Add LTAREs layer
# url to LTAREs map server
LTARE_URL = NRAS_URL + 'WaSHI_LTAREs/MapServer/0'

# Create dictionary of SQL definition queries
ltare_dict = {
    'Western_Diversified': 
        '''Site_Name in ('WSU Puyallup')''',
    'Tree_Fruit': 
        '''Site_Name in ('WSU Wenatchee')''',
    'Northwest_Annual':
        '''Site_Name in ('WSU Mount Vernon')''',
    'Grape':
        '''Site_Name in ('WSU Prosser')''',
    'Dryland':
        '''Site_Name in ('WSU Wilke')''',
    'CBIP':
        '''Site_Name in ('WSU Othello')''',
    'CBI':
        '''Site_Name in ('WSU Wenatchee, 'WSU Othello', 'WSU Prosser')'''
}

# Add LTAREs to each map with definition queries
for key, value in ltare_dict.items():
    mapx = aprx.listMaps(key)[0]
    mapx.addDataFromPath(LTARE_URL)
    ltare = mapx.listLayers('LTAREs')[0]
    ltare.definitionQuery = value
    arcpy.management.ApplySymbologyFromLayer(
        in_layer = ltare,
        in_symbology_layer = LAYER_FOLDER + 'LTAREs.lyrx',
        symbology_fields = "VALUE_FIELD Site_Name Site_Name",
        update_symbology = "DEFAULT"
)
print('Added LTAREs to maps.')

# Add AVA to grape map
AVA = 'https://fortress.wa.gov/agr/gis/wsdagis/rest/services/NRAS/AVA_2022/MapServer/0'
grape_map = aprx.listMaps('Grape')[0]
grape_map.addDataFromPath(AVA)
ava_lyr = grape_map.listLayers('*AVA*')[0]
ava_lyr.definitionQuery = "Name <> 'Puget Sound'"
ava_lyr.visible = False
grape_map.moveLayer(grape_map.listLayers('*SOC*')[0], ava_lyr, 'AFTER')
print('Added AVAs to grape map.')

# Update basemap from deprecated version that
# for some reason gets published to AGOL
for mapx in aprx.listMaps():
    mapx.addBasemap('Topographic')

# Save the project
aprx.save()

# Remove file locks
del aprx

# Script end time
T1_SCRIPT = time.perf_counter()
print(f'Script finished in {round((T1_SCRIPT-T0_SCRIPT)/60, 2)} minutes.')

# Not sure why symbology isn't applied to popups when run in this script,
# but it does seem to run when called from the original scripts.
print('Run apply_crop_symbology.py and apply_soils_symbology.py.')

## Next steps using ArcGIS Pro:
# Open each map, double check everything looks good
# Zoom to appropriate extent

# Share As Web Map
    # Summary: Washington Soil Health Initiative Roadmap Focus Area: Red Raspberry
    # Tags: washi,wsu,wsda,nras,soil health,agriculture, roadmap
